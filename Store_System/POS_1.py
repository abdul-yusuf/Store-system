import sysfrom datetime import datetimefrom PyQt5.QtPrintSupport import QPrintDialog, QPrinterfrom PyQt5.QtGui import QPainterfrom PyQt5.uic import loadUifrom PyQt5 import QtWidgets, QtCore, QtPrintSupport, QtGui, uicfrom PyQt5.QtWidgets import QDialog, QApplication, QMainWindowimport sqlite3from sqlite3 import Errorimport randomimport string# import resourcesfrom PyQt5.QtCore import Qt# ------------------------ Database ------------------------------------def create_connection(db_file):    """ create a database connection to the SQLite database        specified by db_file    :param db_file: database file    :return: Connection object or None    """    conn = None    try:        conn = sqlite3.connect(db_file)        return conn    except Error as e:        print(e)    return conndef create_table(conn, create_table_sql):    """ create a table from the create_table_sql statement    :param conn: Connection object    :param create_table_sql: a CREATE TABLE statement    :return:    """    try:        c = conn.cursor()        c.execute(create_table_sql)    except Error as e:        print(e)def main():    # 'db/POS_sys.db'    database = "db/POS_sys.db"    Item = """ CREATE TABLE IF NOT EXISTS Item (                                        id text UNIQUE,                                        name text ,                                        description text ,                                        price interger,                                        quantity interger,                                        date text                                    ); """    store_item = """ CREATE TABLE IF NOT EXISTS store_item (                                        id text UNIQUE,                                        name text ,                                        description text ,                                        price_box interger,                                        quantity_Box interger,                                        price_each interger,                                        quantity_unit interger,                                        date text                                    ); """    # QUANTITY UNIT is the number of items in a box with PRICE EACH    debtors = """CREATE TABLE IF NOT EXISTS debtors (                                        ref text UNIQUE,                                        customer text ,                                        contact text ,                                        address text,                                        items text,                                        balance text,                                        date text,                                        paid text,                                        paid_date text                                        staff text                                    ); """    sale = """CREATE TABLE IF NOT EXISTS sale (                                        ref text UNIQUE,                                        customer text ,                                        contact text ,                                        address text,                                        items text,                                        price text,                                        date text,                                        payment_type text                                        staff text                                    ); """    daily_account = """CREATE TABLE IF NOT EXISTS daily_account (                                        ref text UNIQUE,                                        date text,                                        total_sale interger                                    ); """    staffs = """CREATE TABLE IF NOT EXISTS staff (                                        # ref text UNIQUE,                                        staff text,                                        pwd text                                    ); """    # create a database connection    conn = create_connection(database)    # create tables    if conn is not None:        # create projects table        create_table(conn, Item)        # create tasks table        create_table(conn, sale)        create_table(conn, daily_account)        create_table(conn, debtors)        create_table(conn, store_item)    else:        print("Error! cannot create the database connection.")main()database = "db/POS_sys.db"conn = sqlite3.connect("db/POS_sys.db")cur = conn.cursor()# ------------------------ Database ------------------------------------#-----------------------------------------------------------------------#Global Values#-----------------------------------------------------------------------date = datetime.now()dateN = date.strftime('%Y-%m-%d')payment_type = 0def create_ref_code(lent=10):    return ''.join(random.choices(        #string.ascii_lowercase +        string.digits, k=lent))cart_dic = {}customer_cart = []def daily_account():    conn = sqlite3.connect(database)    cur = conn.cursor()    cur.execute(f"SELECT * FROM daily_account WHERE date LIKE '%{dateN}%'",            #{"name":fill}            #(fill,)            )    items = cur.fetchone()    print('the date is',items)    if items == None:        conn = sqlite3.connect(database)        cur = conn.cursor()        cur.execute(f"INSERT INTO daily_account (ref,date,total_sale) VALUES('{create_ref_code()}','{dateN}','0')")        conn.commit()        conn.close()        print('New date Opened')daily_account()#------------------------------------------------------------------------class add_page_ui2(QDialog):    """Employee dialog."""    def __init__(self, parent=None):        super().__init__(parent)        # Load the dialog's GUI        loadUi('Ui/add_page_store.ui', self)        self.pushButton.clicked.connect(self.add_to_db)        self.ref_call(5)    def ref_call(self, num=None):        self.ref = create_ref_code(num)        print(self.ref)        self.lineEdit_5.setText(self.ref)    def clear_c(self):        self.lineEdit.setText('')        self.lineEdit_3.setText('')        self.lineEdit_2.setText('')        self.lineEdit_4.setText('')        self.lineEdit_5.setText('')        self.lineEdit_6.setText('')        self.textEdit.setText('')    def add_to_db(self):        name = self.lineEdit.text()        qty = self.lineEdit_2.text()        pr = self.lineEdit_3.text()        qty_in = self.lineEdit_4.text()        unit_pr = self.lineEdit_6.text()        desc = self.textEdit.toPlainText()        id = self.lineEdit_5.text()        # print(name)        # print('pressed')        # id        # name        # description        # price_box        # quantity_Box        # price_each        # quantity_unit        # date        if name != '' or pr != '' or qty != '':            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute(                f"INSERT INTO store_item (id, name, description, price_box, quantity_box, price_each, quantity_unit, date) VALUES('{id}','{name}','{desc}','{pr}','{qty}','{unit_pr}','{qty_in}',datetime('now','localtime'))")            conn.commit()            conn.close()            self.ref_call(5)            self.clear_c()            MainWindow.statusBar().showMessage('Store Item succesfully ADDED')            MainWindow.load_items()class add_page_ui(QDialog):    """Employee dialog."""    def __init__(self, parent=None):        super().__init__(parent)        # Load the dialog's GUI        loadUi('Ui/add_page.ui', self)        self.pushButton.clicked.connect(self.add_to_db)        self.ref_call(5)    def ref_call(self, num=None):        self.ref = create_ref_code(num)        print(self.ref)        self.lineEdit_5.setText(self.ref)    def clear_c(self):        self.lineEdit.setText('')        self.lineEdit_3.setText('')        self.lineEdit_2.setText('')        self.textEdit.setText('')    def add_to_db(self):        name = self.lineEdit.text()        qty = self.lineEdit_2.text()        pr = self.lineEdit_3.text()        desc = self.textEdit.toPlainText()        id = self.lineEdit_5.text()        print(name)        print('pressed')        di = {            "name" : name,            "description": desc,            "id": id,            "quantity": qty,            "price": pr,            "date": "datetime('now','localtime')"            }        if name != '' or pr != '' or qty != '':            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute("INSERT INTO Item (id, name, description, price, quantity,date) VALUES(:id, :name, :description, :price, :quantity,:date)", di)            conn.commit()            conn.close()            self.ref_call(5)            self.clear_c()            MainWindow.statusBar().showMessage('Item succesfully ADDED')            MainWindow.load_items()class remove_page_ui2(QDialog):    """Employee dialog."""    def __init__(self, parent=None):        super().__init__(parent)        # Load the dialog's GUI        loadUi('UI/remove_page_store.ui', self)        self.load_items()        self.tableWidget.cellClicked.connect(self.table_data)    def load_items(self):        cur.execute('SELECT * FROM store_item')        items = cur.fetchall()        self.list_items(items)    def list_items(self, items):        count = len(items)        self.tableWidget.setRowCount(0)        self.tableWidget.setRowCount(count)        tablerow = 0        for item in items:            item = list(item)            item[0] = str(item[0])            item[3] = str(item[3])            item[4] = str(item[4])            self.tableWidget.setItem(tablerow, 0, QtWidgets.QTableWidgetItem(item[0]))            self.tableWidget.setItem(tablerow, 1, QtWidgets.QTableWidgetItem(item[1]))            self.tableWidget.setItem(tablerow, 2, QtWidgets.QTableWidgetItem(item[2]))            self.tableWidget.setItem(tablerow, 3, QtWidgets.QTableWidgetItem(item[3]))            self.tableWidget.setItem(tablerow, 4, QtWidgets.QTableWidgetItem(item[4]))            self.tableWidget.setItem(tablerow, 5, QtWidgets.QTableWidgetItem(str(item[5])))            self.tableWidget.setItem(tablerow, 6, QtWidgets.QTableWidgetItem(str(item[6])))            self.tableWidget.setItem(tablerow, 7, QtWidgets.QTableWidgetItem(str(item[7])))            self.ls = []            tablerow += 1        conn.commit()    @QtCore.pyqtSlot()    def table_data(self):        index = (self.tableWidget.selectionModel().currentIndex())        # row = index.sibling(index.row(),index.column()).data()        ls = []        list = []        if True:            for colum in range(5):                row = index.sibling(index.row(), colum).data()                list.append(row)            ls.append(            {            "name" : list[1],            "description":list[2],            "quantity": 1,            "qty": list[4],            "price": list[3],            "ps": list[3],            })            self.ls.append(list[0])        try:            self.pushButton.clicked.connect(self.delete_item)        except:            print('NO item to remove')    def delete_item(self):        if self.ls != '':            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute(f"DELETE FROM store_item WHERE id='{self.ls[0]}'")            conn.commit()            conn.close()            self.load_items()            MainWindow.statusBar().showMessage('Item succesfully DELETED')            MainWindow.load_items()class remove_page_ui(QDialog):    """Employee dialog."""    def __init__(self, parent=None):        super().__init__(parent)        # Load the dialog's GUI        loadUi('UI/remove_page.ui', self)        self.load_items()        self.tableWidget.cellClicked.connect(self.table_data)    def load_items(self):        cur.execute('SELECT * FROM Item')        items = cur.fetchall()        self.list_items(items)    def list_items(self, items):        count = len(items)        self.tableWidget.setRowCount(0)        self.tableWidget.setRowCount(count)        tablerow = 0        for item in items:            item = list(item)            item[0] = str(item[0])            item[3] = str(item[3])            item[4] = str(item[4])            self.tableWidget.setItem(tablerow, 0, QtWidgets.QTableWidgetItem(item[0]))            self.tableWidget.setItem(tablerow, 1, QtWidgets.QTableWidgetItem(item[1]))            self.tableWidget.setItem(tablerow, 2, QtWidgets.QTableWidgetItem(item[2]))            self.tableWidget.setItem(tablerow, 3, QtWidgets.QTableWidgetItem(item[3]))            self.tableWidget.setItem(tablerow, 4, QtWidgets.QTableWidgetItem(item[4]))            self.ls = []            tablerow +=1        conn.commit()    @QtCore.pyqtSlot()    def table_data(self):        index = (self.tableWidget.selectionModel().currentIndex())        #row = index.sibling(index.row(),index.column()).data()        ls = []        list = []        if True:            for colum in range(5):                row = index.sibling(index.row(),colum).data()                list.append(row)            ls.append(                {            "name" : list[1],            "description":list[2],            "quantity": 1,            "qty": list[4],            "price": list[3],            "ps": list[3],            })            self.ls.append(list[0])        try:            self.pushButton.clicked.connect(self.delete_item)        except:            print('NO item to remove')    def delete_item(self):        if self.ls != '':            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute(f"DELETE FROM Item WHERE id='{self.ls[0]}'")            conn.commit()            conn.close()            self.load_items()            MainWindow.statusBar().showMessage('Item succesfully DELETED')            MainWindow.load_items()class credit_accept(QDialog):    def __init__(self, data, parent=None):        super().__init__(parent)        # Load the dialog's GUI i o[        loadUi('UI/credit_accept.ui', self)        self.label_5.setText(data[1])        self.label_9.setText(data[0])        self.label_7.setText(data[4])        self.label_6.setText(data[5])        MainWindow.statusBar().showMessage('Debt sucessfully PAID')        MainWindow.load_items()class Cart_approved(QDialog):    """Employee dialog."""    def __init__(self,parent=None):        super().__init__(parent)        # Load the dialog's GUI i o[        loadUi('UI/print_page.ui', self)        # self.pushButton.clicked.connect(self.save_sale)        # self.pushButton_.clicked.connect(self.save_sale)        self.ref = create_ref_code()        self.GetData()        if self.exec_() == self.Accepted:            self.save_sale()            MainWindow.clear_c()            # self.label.print_(printer)        # label.setText(DisplayData)        # self.tb = QTextBrowser()        # self.tb.setAcceptRichText(True)        # self.tb.setOpenExternalLinks(True)        # MainWindow.show()        # sys.exit(app.exec_())    def receipt(self, itemss):        total = 0        width = 35        currency = "NGN"        shop_name = 'Shop sales #5444'        print(itemss)        items = [            shop_name.center(width),        ]        head = 'ITEMS'.ljust(width - 3)        head += currency        items.append(head + f'\n{"-" * width}')        for i in itemss:            total += int(i['ps'])            # print(type(itemss['ps']))            all_price = str(i['ps'])            name = i['name']            qty = i['quantity']            msg = f'{name} x {qty}'.ljust(width - len(all_price), ' ')            msg += all_price            items.append(msg)        total = str(total)        # total.rjust        items.append(f'{"=" * width}' + '\nTOTAL:'.ljust(width - len(total) + 1) + total)        # items.append(f'{"="*width}\nTOTAL:'.ljust(width-len(total)+1)+total)        print(items)        return '\n'.join(items)    def GetData(self):        # global DisplayData        # New_Read_Map_File.read_MapFile_main()        # DisplayData = (MainWindow.items_bought().df.to_string(col_space=14, justify="justify"))        # print(DisplayData)        # data = []        # # print(customer_cart)        # for i in customer_cart:        #     datas = f"{i['name']},x,{i['quantity']}, ,{i['ps']}"        #     data.append(datas)        #        # MainWindow.items_bought()        # self.tb.append('hello')        itemx = self.receipt(customer_cart)        self.tb.setText(str(itemx))        print('items bought ',str(itemx))    def update_daily_sale(self):        conn = sqlite3.connect(database)        cur = conn.cursor()        cur.execute(f"SELECT * FROM daily_account WHERE date LIKE '%{dateN}%'")        items = cur.fetchone()        # print('the total',items)        total = items[2]        sub_total = int(total) + int(cart_dic['total'])        cur.execute(f"UPDATE daily_account SET total_sale = '{sub_total}' WHERE date = '{dateN}'")        conn.commit()        conn.close()    def save_sale(self):        #print('customer cart',customer_cart)        # printer = QPrinter(QPrinter.HighResolution)        # dialog = QPrintDialog(printer, self)        # if dialog.exec_() == QPrintDialog.Accepted:        #     self.label.print_(printer)        #        # painter = QPainter();        # painter.begin(printer);        # # this bit is just positioning stuff, you can ignore it if it's confusing        # xscale = printer.pageRect().width()/myWidget-width();        # yscale = printer.pageRect().height()/myWidget-height();        # scale = min(xscale, yscale);        # painter.translate(printer.paperRect().x() + printer.pageRect().width()/2,        #                 printer.paperRect().y() + printer.pageRect().height()/2);        # painter.scale(scale, scale);        # painter.translate(-width()/2, -height()/2);        # # back to the need-to-know:        # myWidget.render(painter);        if payment_type == 0:            # print(self.ref)            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute(f"INSERT INTO sale (ref,customer,contact,address,items,price,date,payment_type) VALUES ('{self.ref}','{cart_dic['name']}','{cart_dic['contact']}','{cart_dic['address']}','{i for i in customer_cart}','{cart_dic['total']}',datetime('now','localtime'),'CASH')")            conn.commit()            conn.close()            self.update_daily_sale()            MainWindow.statusBar().showMessage('ORDER sucessfull')        elif payment_type == 1:            print('transfer')            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute(f"INSERT INTO sale (ref,customer,contact,address,items,price,date,payment_type) VALUES ('{self.ref}','{cart_dic['name']}','{cart_dic['contact']}','{cart_dic['address']}','{i for i in customer_cart}','{cart_dic['total']}',datetime('now','localtime'),'TRANSFER')")            conn.commit()            conn.close()            self.update_daily_sale()            MainWindow.statusBar().showMessage('ORDER sucessfull')        elif payment_type == 2:            print('POS')            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute(f"INSERT INTO sale (ref,customer,contact,address,items,price,date,payment_type) VALUES ('{self.ref}','{cart_dic['name']}','{cart_dic['contact']}','{cart_dic['address']}','{i for i in customer_cart}','{cart_dic['total']}',datetime('now','localtime'),'POS')")            conn.commit()            conn.close()            self.update_daily_sale()            MainWindow.statusBar().showMessage('ORDER sucessfull')        elif payment_type == 3:            print('on credit')            # print(self.ref)            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute(                f"INSERT INTO debtors(ref,customer,contact,address,items,balance,date, paid) VALUES ('{self.ref}','{cart_dic['name']}','{cart_dic['contact']}','{cart_dic['address']}','{MainWindow.items_bought}','{cart_dic['total']}',datetime('now','localtime'),'Not Paid')"            )            conn.commit()            conn.close()            self.update_daily_sale()            MainWindow.statusBar().showMessage('ORDER sucessfull')        def inventory_recap():# recalculate what's left in the inventory            for item  in customer_cart:                #print('the_items',item)                ref = item['id']                qty = item['quantity']                conn = sqlite3.connect(database)                cur = conn.cursor()                cur.execute(f"UPDATE Item SET quantity = quantity-{int(qty)} WHERE id= '{ref}'")                conn.commit()                conn.close()        #def daily_db():        inventory_recap()        MainWindow.load_items()    #def print_widget(self):    #Create printer    #printer = QtPrintSupport.QPrinter()    #Create painter    #painter = QtGui.QPainter()    #Start painter    #painter.begin(printer)    #Grab a widget you want to print    #screen = self.widget.grab()    #Draw grabbed pixmap    #painter.drawPixmap(10, 10, screen)    #End painting    #painter.end()class cal_page_ui(QDialog):    def __init__(self, parent=None):        super().__init__(parent)        # Load the dialog's GUI        loadUi('UI/calculator.ui', self)        self.one.clicked.connect(self.action1)        self.two.clicked.connect(self.action2)        self.three.clicked.connect(self.action3)        self.four.clicked.connect(self.action4)        self.five.clicked.connect(self.action5)        self.six.clicked.connect(self.action6)        self.seven.clicked.connect(self.action7)        self.eight.clicked.connect(self.action8)        self.nine.clicked.connect(self.action9)        self.zero.clicked.connect(self.action0)        self.minus.clicked.connect(self.action_minus)        self.plus.clicked.connect(self.action_plus)        self.div.clicked.connect(self.action_div)        self.mult.clicked.connect(self.action_mul)        self.dot.clicked.connect(self.action_point)        self.clear.clicked.connect(self.action_clear)        self.equal.clicked.connect(self.action_equal)        self.dell.clicked.connect(self.action_del)        self.value1=0        self.value2=0        if self.minus.clicked or self.mult.clicked or self.div.clicked or self.plus.clicked:            def setvalue1(self):                tex = str(self.value1)+'+'+str(self.value2)    # def clear_cl(self):    #     self.lineEdit.setText('')    #     self.value1 = 0    def action_equal(self):        # get the label text        equation = self.lineEdit.text()        try:            # getting the ans            ans = eval(equation)            # setting text to the label            self.lineEdit.setText(str(ans))        except:            # setting text to the label            self.lineEdit.setText("Wrong Input")    def action_plus(self):        # appending label text        text = self.lineEdit.text()        self.lineEdit.setText(text + " + ")    def action_minus(self):        # appending label text        text = self.lineEdit.text()        self.lineEdit.setText(text + " - ")    def action_div(self):        # appending label text        text = self.lineEdit.text()        self.lineEdit.setText(text + " / ")    def action_mul(self):        # appending label text        text = self.lineEdit.text()        self.lineEdit.setText(text + " * ")    def action_point(self):        # appending label text        text = self.lineEdit.text()        self.lineEdit.setText(text + ".")    def action0(self):        # appending label text        text = self.lineEdit.text()        self.lineEdit.setText(text + "0")    def action1(self):        # appending label text        text = self.lineEdit.text()        self.lineEdit.setText(text + "1")    def action2(self):        # appending label text        text = self.lineEdit.text()        self.lineEdit.setText(text + "2")    def action3(self):        # appending label text        text = self.lineEdit.text()        self.lineEdit.setText(text + "3")    def action4(self):        # appending label text        text = self.lineEdit.text()        self.lineEdit.setText(text + "4")    def action5(self):        # appending label text        text = self.lineEdit.text()        self.lineEdit.setText(text + "5")    def action6(self):        # appending label text        text = self.lineEdit.text()        self.lineEdit.setText(text + "6")    def action7(self):        # appending label text        text = self.lineEdit.text()        self.lineEdit.setText(text + "7")    def action8(self):        # appending label text        text = self.lineEdit.text()        self.lineEdit.setText(text + "8")    def action9(self):        # appending label text        text = self.lineEdit.text()        self.lineEdit.setText(text + "9")    def action_clear(self):        # clearing the label text        self.lineEdit.setText("")    def action_del(self):        # clearing a single digit        text = self.lineEdit.text()        print(text[:len(text) - 1])        self.lineEdit.setText(text[:len(text) - 1])class edit_page_ac2(QDialog):    """Employee dialog."""    def __init__(self, items, parent=None):        super().__init__(parent)        # Load the dialog's GUI        loadUi('UI/edit_page_ac_store.ui', self)        self.lineEdit.setText(items[1])        self.lineEdit_2.setText(items[4])        self.lineEdit_3.setText(items[3])        self.lineEdit_4.setText(items[6])        self.lineEdit_5.setText(items[0])        self.lineEdit_6.setText(items[5])        self.textEdit.setText(items[2])        self.item = items        self.pushButton.clicked.connect(lambda x: self.db_update())    def db_update(self):        ref = self.item[0]        if self.lineEdit.text() != self.item[1]:            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute(f"UPDATE store_item SET name = '{self.lineEdit.text()}' WHERE id= '{ref}'")            conn.commit()            conn.close()            #self.load_items()            MainWindow.statusBar().showMessage('Name succesfully UPDATED')        if self.textEdit.toPlainText() != self.item[2]:            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute(f"UPDATE store_item SET description = '{self.textEdit.toPlainText()}' WHERE id= '{ref}'")            conn.commit()            conn.close()            #self.load_items()            MainWindow.statusBar().showMessage('Description succesfully UPDATED')        if self.lineEdit_3.text() != self.item[3]:            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute(f"UPDATE store_item SET price_box = '{self.lineEdit_3.text()}' WHERE id= '{ref}'")            conn.commit()            conn.close()            #self.load_items()            MainWindow.statusBar().showMessage('Price of Box succesfully UPDATED')        if self.lineEdit_2.text() != self.item[4]:            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute(f"UPDATE store_item SET quantity_Box = '{self.lineEdit_2.text()}' WHERE id= '{ref}'")            conn.commit()            conn.close()            #self.load_items()            MainWindow.statusBar().showMessage('Box Quantity succesfully UPDATED')        if self.lineEdit_6.text() != self.item[5]:            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute(f"UPDATE store_item SET price_each = '{self.lineEdit_2.text()}' WHERE id= '{ref}'")            conn.commit()            conn.close()            #self.load_items()            MainWindow.statusBar().showMessage('Unit Price succesfully UPDATED')        if self.lineEdit_4.text() != self.item[6]:            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute(f"UPDATE store_item SET quantity_unit = '{self.lineEdit_4.text()}' WHERE id= '{ref}'")            conn.commit()            conn.close()            #self.load_items()            MainWindow.statusBar().showMessage('Unit Quantity succesfully UPDATED')        if self.lineEdit_5.text() != self.item[0]:            #self.load_items()            MainWindow.statusBar().showMessage('Ref Number cannot be UPDATED')        if self.pushButton.clicked:            MainWindow.load_items()            self.exec_()class edit_page_ac(QDialog):    """Employee dialog."""    def __init__(self, items, parent=None):        super().__init__(parent)        # Load the dialog's GUI        loadUi('UI/edit_page_ac.ui', self)        #print(items)        self.lineEdit.setText(items[1])        self.lineEdit_2.setText(items[4])        self.lineEdit_3.setText(items[3])        self.lineEdit_5.setText(items[0])        # self.lineEdit_6.setText(items[0])        self.textEdit.setText(items[2])        self.item = items        self.pushButton.clicked.connect(lambda x: self.db_update())    def db_update(self):        ref = self.item[0]        if self.lineEdit.text() != self.item[1]:            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute(f"UPDATE Item SET name = '{self.lineEdit.text()}' WHERE id= '{ref}'")            conn.commit()            conn.close()            # self.load_items()            MainWindow.statusBar().showMessage('Name succesfully UPDATED')        if self.lineEdit_2.text() != self.item[4]:            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute(f"UPDATE Item SET quantity = '{self.lineEdit_2.text()}' WHERE id= '{ref}'")            conn.commit()            conn.close()            # self.load_items()            MainWindow.statusBar().showMessage('Quantity succesfully UPDATED')        if self.lineEdit_3.text() != self.item[3]:            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute(f"UPDATE Item SET price = '{self.lineEdit_3.text()}' WHERE id= '{ref}'")            conn.commit()            conn.close()            # self.load_items()            MainWindow.statusBar().showMessage('Price succesfully UPDATED')        if self.textEdit.toPlainText() != self.item[2]:            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute(f"UPDATE Item SET description = '{self.textEdit.toPlainText()}' WHERE id= '{ref}'")            conn.commit()            conn.close()            # self.load_items()            MainWindow.statusBar().showMessage('Description succesfully UPDATED')        if self.pushButton.clicked:            MainWindow.load_items()            self.exec_()class edit_page_ui2(QDialog):    """Employee dialog."""    def __init__(self, parent=None):        super().__init__(parent)        # Load the dialog's GUI        loadUi('UI/edit_page_store.ui', self)        self.load_items()        try:            self.list = []        except:            print('No item to edit')        try:            self.tableWidget.cellClicked.connect(self.table_data)            self.tableWidget.cellClicked.connect(self.edit_cell)        except:            print('No item to edit')    def edit_dialog_acs(self, list):        # items = cur.fetchall()        # print(list)        dlg = edit_page_ac2(list)        if dlg.pushButton.clicked:            dlg.pushButton.clicked.connect(self.reload)        dlg.exec_()    def load_items(self):        cur.execute('SELECT * FROM store_item')        items = cur.fetchall()        self.list_items(items)    def reload(self):        self.load_items()    def list_items(self, items):        count = len(items)        self.tableWidget.setRowCount(0)        self.tableWidget.setRowCount(count)        tablerow = 0        # print(items)        for item in items:            item = list(item)            item[0] = str(item[0])            item[3] = str(item[3])            item[4] = str(item[4])            item[5] = str(item[5])            # item[6] = str(item[6])            item[7] = str(item[7])            self.tableWidget.setItem(tablerow, 0, QtWidgets.QTableWidgetItem(item[0]))            self.tableWidget.setItem(tablerow, 1, QtWidgets.QTableWidgetItem(item[1]))            self.tableWidget.setItem(tablerow, 2, QtWidgets.QTableWidgetItem(item[2]))            self.tableWidget.setItem(tablerow, 3, QtWidgets.QTableWidgetItem(item[3]))            self.tableWidget.setItem(tablerow, 4, QtWidgets.QTableWidgetItem(item[4]))            self.tableWidget.setItem(tablerow, 5, QtWidgets.QTableWidgetItem(str(item[5])))            self.tableWidget.setItem(tablerow, 6, QtWidgets.QTableWidgetItem(str(item[6])))            self.tableWidget.setItem(tablerow, 7, QtWidgets.QTableWidgetItem(str(item[7])))            self.tableWidget.setItem(tablerow, 8, QtWidgets.QTableWidgetItem(str(item[7])))            #            # self.tableWidget.setItem(tablerow, 5, QtWidgets.QTableWidgetItem(item[5]))            # self.tableWidget.setItem(tablerow, 6, QtWidgets.QTableWidgetItem(item[6]))            # self.tableWidget.setItem(tablerow, 7, QtWidgets.QTableWidgetItem(item[7]))            tablerow +=1        conn.commit()    def edit_cell(self):        index = (self.tableWidget.selectionModel().currentIndex())        #row = index.sibling(index.row(),index.column()).data()        while True:            if self.list == []:                for colum in range(9):#to bring out the table data for use                    row = index.sibling(index.row(),colum).data()                    self.list.append(row)                # print('True',self.list)                break            else:                self.list = []                # print('False',self.list)    @QtCore.pyqtSlot()    def table_data(self):        index = (self.tableWidget.selectionModel().currentIndex())        #row = index.sibling(index.row(),index.column()).data()        ls = []        list = []        if True:            for colum in range(9):                row = index.sibling(index.row(),colum).data()                list.append(row)            ls.append({                "name" : list[1],                "description":list[2],                "id": list[0],                "quantity": 1,                "qty": list[4],                "price": list[3],                "ps": list[3],            })        self.pushButton.clicked.connect(lambda x: self.edit_dialog_acs(self.list))class edit_page_ui(QDialog):    """Employee dialog."""    def edit_dialog_acs(self, list):        # items = cur.fetchall()        dlg = edit_page_ac(list)        if dlg.pushButton.clicked:            dlg.pushButton.clicked.connect(self.reload)        dlg.exec_()        # if dlg.pushButton_2.clicked:        # print('cancel')    def db_update(self):        ref = self.item[0]        if self.lineEdit.text() != self.item[1]:            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute(f"UPDATE Item SET name = '{self.lineEdit.text()}' WHERE id= '{ref}'")            conn.commit()            conn.close()            #self.load_items()            MainWindow.statusBar().showMessage('Name succesfully UPDATED')        if self.lineEdit_2.text() != self.item[4]:            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute(f"UPDATE Item SET quantity = '{self.lineEdit_2.text()}' WHERE id= '{ref}'")            conn.commit()            conn.close()            #self.load_items()            MainWindow.statusBar().showMessage('Quantity succesfully UPDATED')        if self.lineEdit_3.text() != self.item[3]:            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute(f"UPDATE Item SET price = '{self.lineEdit_3.text()}' WHERE id= '{ref}'")            conn.commit()            conn.close()            #self.load_items()            MainWindow.statusBar().showMessage('Price succesfully UPDATED')        if self.textEdit.toPlainText() != self.item[2]:            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute(f"UPDATE Item SET description = '{self.textEdit.toPlainText()}' WHERE id= '{ref}'")            conn.commit()            conn.close()            #self.load_items()            MainWindow.statusBar().showMessage('Description succesfully UPDATED')        if self.pushButton.clicked:            self.exec_()    def load_items(self):        cur.execute('SELECT * FROM Item')        items = cur.fetchall()        self.list_items(items)    def reload(self):        self.load_items()        #if self.textEdit.text() != item[2]:        #conn = sqlite3.connect('Pos_sys.db')        #cur = conn.cursor()        #cur.execute(f"UPDATE Item SET name = {self.textEdit.text()} WHERE id= '{ref}'")        #conn.commit()        #conn.close()        # self.item = item    def __init__(self, parent=None):        super().__init__(parent)        # Load the dialog's GUI        loadUi('UI/edit_page.ui', self)        self.load_items()        self.tableWidget.cellClicked.connect(self.table_data)        self.tableWidget.cellClicked.connect(self.edit_cell)    def load_items(self):        cur.execute('SELECT * FROM Item')        items = cur.fetchall()        self.list_items(items)    def edit_cell(self):        index = (self.tableWidget.selectionModel().currentIndex())        #row = index.sibling(index.row(),index.column()).data()        while True:            if self.list == []:                for colum in range(5):#to bring out the table data for use                    row = index.sibling(index.row(),colum).data()                    self.list.append(row)                # print('True',self.list)                break            else:                self.list = []                # print('False',self.list)    def reload(self):        self.load_items()    def list_items(self, items):        count = len(items)        self.tableWidget.setRowCount(0)        self.tableWidget.setRowCount(count)        tablerow = 0        for item in items:            item = list(item)            item[0] = str(item[0])            item[3] = str(item[3])            item[4] = str(item[4])            self.tableWidget.setItem(tablerow, 0, QtWidgets.QTableWidgetItem(item[0]))            self.tableWidget.setItem(tablerow, 1, QtWidgets.QTableWidgetItem(item[1]))            self.tableWidget.setItem(tablerow, 2, QtWidgets.QTableWidgetItem(item[2]))            self.tableWidget.setItem(tablerow, 3, QtWidgets.QTableWidgetItem(item[3]))            self.tableWidget.setItem(tablerow, 4, QtWidgets.QTableWidgetItem(item[4]))            tablerow +=1        conn.commit()    @QtCore.pyqtSlot()    def table_data(self):        index = (self.tableWidget.selectionModel().currentIndex())        #row = index.sibling(index.row(),index.column()).data()        ls = []        list = []        if True:            for colum in range(5):                row = index.sibling(index.row(),colum).data()                list.append(row)            ls.append({                "name" : list[1],                "description":list[2],                "id": list[0],                "quantity": 1,                "qty": list[4],                "price": list[3],                "ps": list[3],            })        prev = ls        try:            self.pushButton.clicked.connect(lambda x: self.edit_dialog_acs(self.list))            self.list = []        except:            print('No item to edit')        #print(ls)        #print(prev)pwd = Falseclass Ui_Dialog(QDialog):    def __init__(self, parent=None):        super().__init__(parent)        # Load the dialog's GUI        loadUi('UI/login_page.ui', self)        # fileh = QtCore.QFile('UI/login_page.ui')        # fileh.open(QtCore.QFile.ReadOnly)        # uic.loadUi(fileh, self)        # fileh.close()        self.pushButton.clicked.connect(self.doLogin)        self.pushButton.clicked.connect(self.accept)    def doLogin(self):        name = str(self.lineEdit.text())        passwd = str(self.lineEdit_2.text())        if name == "admin" and passwd =="admin":            # global pwd            # pwd = True            # self.exec_()            print('correct password')            # self.runIt()            return True        else:            print('error login in')            return False            # QMessageBox.warning(self, 'Greška',        # "Bad user or password", QMessageBox.Ok)    # def runIt(self):    #     myprogram = MainWindow()    #     myprogram.show() #myprogram isdef load_ui(self, file):    fileh = QtCore.QFile(f'{file}.ui')    fileh.open(QtCore.QFile.ReadOnly)    uic.loadUi(fileh, self)    fileh.close()class MainWindow(QMainWindow):    def __init__(self, *args, **kwargs):        super(MainWindow, self).__init__(*args, **kwargs)        # loadUi('POS3.ui', self)        fileh = QtCore.QFile('UI/POS3.ui')        fileh.open(QtCore.QFile.ReadOnly)        uic.loadUi(fileh, self)        fileh.close()        # load_ui(self, 'POS3')        #self.listWidget.setColumsWidth(0, 250)        self.load_items()        #self.pushButton_2.clicked.connect(self.filter)        #self.connect(self.pushButton_2, SIGNAL("clicked()"),self.filter)        # -------------------------- Variabels ------------------------------------        global customer_cart        self.customer_items = []#instance of items in cart        customer_cart = self.customer_items        # -------------------------- Variabels ------------------------------------        #-------------------------- Pushbuttons ------------------------------------        self.pushButton.clicked.connect(self.add_dialog)        self.pushButton_3.clicked.connect(self.remove_dialog)        self.pushButton_4.clicked.connect(self.edit_dialog)        self.pushButton_2.clicked.connect(self.add_dialog2)        self.pushButton_6.clicked.connect(self.remove_dialog2)        self.pushButton_5.clicked.connect(self.edit_dialog2)        self.refresh_btn.clicked.connect(self.load_items)        self.cal.clicked.connect(self.Cal_dialog)        self.pushButton_8.clicked.connect(self.clear_c)        self.pushButton_7.clicked.connect(self.print_dialog)        #-------------------------- Pushbuttons ------------------------------------        #-------------------------- Tabels ------------------------------------        self.tableWidget.setShowGrid(True)        self.tableWidget.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)        self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)        self.tableWidget.cellClicked.connect(self.table_data)        self.tableWidget_3.cellClicked.connect(self.credit_accept)        header = self.tableWidget_4.horizontalHeader()        header.setSectionResizeMode(0, QtWidgets.QHeaderView.Stretch)        header.setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)        header.setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeToContents)        header.setSectionResizeMode(3, QtWidgets.QHeaderView.ResizeToContents)        header.setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeToContents)        header_1 = self.tableWidget.horizontalHeader()        header_1.setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)        header_1.setSectionResizeMode(1, QtWidgets.QHeaderView.Stretch)        header_1.setSectionResizeMode(2, QtWidgets.QHeaderView.ResizeToContents)        header_1.setSectionResizeMode(3, QtWidgets.QHeaderView.ResizeToContents)        header_1.setSectionResizeMode(4, QtWidgets.QHeaderView.ResizeToContents)        self.tablerow = 0        self.tableWidget_4.setRowCount(0)        #self.tableWidget_4.cellClicked.connect(self.item_plus)        # -------------------------- Tabels ------------------------------------        # -------------------------- LineEdits ------------------------------------        self.lineEdit_3.textChanged.connect(self.amount_d)        self.home_filter_lineEdit.textChanged.connect(lambda x: self.filters(1))        self.lineEdit.textChanged.connect(lambda x: self.filters(2))        self.lineEdit_2.textChanged.connect(lambda x: self.filters(3))        # -------------------------- LineEdits ------------------------------------        self.daily_sales()    def clear_c(self):#clear customer_items_list table        self.tableWidget_4.setRowCount(0)        self.customer_items = []        self.label_9.setText('0')        self.amount_due.setText('00')        self.lineEdit_3.setText('0')        self.lineEdit_cust_add.setText('')        self.lineEdit_cust_cont.setText('')        self.lineEdit_cust_name.setText('')    def daily_sales(self):        #value = 0        conn = sqlite3.connect(database)        cur = conn.cursor()        cur.execute(f"SELECT * FROM daily_account WHERE date LIKE '%{dateN}%'")        values = cur.fetchall()        # print(values)        value =values[0][2]        # print(value)        conn.commit()        conn.close()        self.label_19.setText(str(value))    def amount_d(self):        try:            if self.lineEdit_3.text() != '':                s=int(self.lineEdit_3.text())                e=int(self.label_9.text())                #print(type(s),type(e))                #print(s,e)                if self.label_9.text()=='0':                    self.amount_due.setText('0')                elif s>e:                    amount = int(self.lineEdit_3.text())-int(self.label_9.text())                    self.amount_due.setText(str(amount))                #print(amount)        except:            print('Error')    @QtCore.pyqtSlot()    def item_plus(self, num=None):#increase item qty in customer_items_list table        index = (self.tableWidget_4.selectionModel().currentIndex())        row = index.sibling(index.row(),3).data()        #print(row, index.row())        ls = self.customer_items        ro = index.row()        if num!=None:            qty = ls[num]['quantity']            stock = int(ls[num]['qty'])            if qty < stock:                qty += 1                self.customer_items[num]['quantity'] = qty                price = int(self.customer_items[num]['price'])                self.customer_items[num]['ps'] = int(self.customer_items[num]['ps'])+price                self.tableWidget_4.setRowCount(0)                self.cust_items_list(self.customer_items)            else:                print('out of product')        else:            qty = ls[ro]['quantity']            stock = int(ls[ro]['qty'])            if qty < stock:                self.tableWidget_4.setRowCount(0)                qty += 1                price = int(self.customer_items[ro]['price'])                self.customer_items[ro]['ps'] = int(self.customer_items[ro]['ps'])+price                self.customer_items[ro]['quantity'] = qty                self.cust_items_list(self.customer_items)                self.grand_total()            else:                print('out of product')    @QtCore.pyqtSlot()    def item_minus(self):#minus item qty from cust_items_list table        index = (self.tableWidget_4.selectionModel().currentIndex())        row = index.sibling(index.row(),3).data()        # print(row, index.row())        if row == '1':            ro = index.row()            ls = self.customer_items            #print(ls)            del ls[ro]            #print(ls)            self.tableWidget_4.setRowCount(0)            if len(ls)==0:                pass            else:                self.cust_items_list(ls)            self.grand_total()        else:            ls = self.customer_items            ro = index.row()            qty = ls[ro]['quantity']            qty -= 1            self.customer_items[ro]['quantity'] = qty            self.tableWidget_4.setRowCount(0)            price = int(self.customer_items[ro]['price'])            self.customer_items[ro]['ps'] = int(self.customer_items[ro]['ps'])-price            self.cust_items_list(self.customer_items)            self.grand_total()    @QtCore.pyqtSlot()    def table_data(self):        index = (self.tableWidget.selectionModel().currentIndex())        #row = index.sibling(index.row(),index.column()).data()        ls = []        list = []        if True:            for colum in range(5):#to bring out the table data for use                row = index.sibling(index.row(),colum).data()                list.append(row)            ls.append({                "name" : list[1],                "description":list[2],                "id": list[0],                "plus": "+",                "minus": "-",                "quantity": 1,                "qty": list[4],                "price": list[3],                "ps": list[3],            })        prev = []        for i in self.customer_items:#            x = i['id']            if x in prev:                pass            else:                prev.append(x)        #check if item is already in list to increase items_qty        if ls[0]['id'] in prev:            if int(ls[0]['qty'])==0:                print('Item out Of STOCK')            else:                x=ls[0]['id']                y = prev.index(x)                #print('prev list',prev)                #print('in table list',x)                #print('item table index',y)                self.item_plus(y)                self.grand_total()#price total of items in customer items list        #add item to list        else:            if int(ls[0]['qty'])==0:                print('Item out Of STOCK')            else:                self.cust_items_list(ls)#instantiating customer_items_list to add an item                self.customer_items.append({                    "name" : list[1],                    "description":list[2],                    "id": list[0],                    "quantity": 1,                    "qty": list[4],                    "price": list[3],                    "ps": list[3],                })                self.grand_total()#price total of items in customer items list    def cust_items_list(self, ls):# method for customer_items_list items add        btn_minus = QtWidgets.QPushButton(self.tableWidget_4)        btn_minus.setText('REMOVE')        btn_minus.clicked.connect(self.item_minus)        btn_plus = QtWidgets.QPushButton(self.tableWidget_4)        btn_plus.clicked.connect(self.item_plus)        btn_plus.setText('ADD')        tableWidget = self.tableWidget_4        # print('cust list',ls)        if len(ls)>1:            for i in ls:                btn_minus = QtWidgets.QPushButton(self.tableWidget_4)                btn_minus.setText('REMOVE')                btn_minus.clicked.connect(self.item_minus)                btn_plus = QtWidgets.QPushButton(self.tableWidget_4)                btn_plus.clicked.connect(self.item_plus)                btn_plus.setText('ADD')                tablerow = tableWidget.rowCount()                count = tableWidget.rowCount()+1                tableWidget.setRowCount(count)                tableWidget.setItem(tablerow, 0, QtWidgets.QTableWidgetItem(i['name']))                tableWidget.setItem(tablerow, 1, QtWidgets.QTableWidgetItem(str(i['price'])))                tableWidget.setCellWidget(tablerow, 2, btn_minus)                tableWidget.setItem(tablerow, 3, QtWidgets.QTableWidgetItem(str(i['quantity'])))                tableWidget.setCellWidget(tablerow, 4, btn_plus)        else:            tablerow = tableWidget.rowCount()            count = tableWidget.rowCount()+1            tableWidget.setRowCount(count)            tableWidget.setItem(tablerow, 0, QtWidgets.QTableWidgetItem(ls[0]['name']))            tableWidget.setItem(tablerow, 1, QtWidgets.QTableWidgetItem(str(ls[0]['price'])))            tableWidget.setCellWidget(tablerow, 2, btn_minus)            tableWidget.setItem(tablerow, 3, QtWidgets.QTableWidgetItem(str(ls[0]['quantity'])))            tableWidget.setCellWidget(tablerow, 4, btn_plus)    def grand_total(self):        value = 0        for item in self.customer_items:            price = item['price']            qty = item['quantity']            total = int(price)*int(qty)            value += total        self.label_9.setText(str(value))        self.lineEdit_3.setText(str(value))    def items_value(self, items):        value = 0        for item in items:            price = item[3]            qty = item[4]            total = price*qty            value += total        self.label_14.setText(str(value))        self.label_17.setText(str(value))    def items_qty(self, items):        value = 0        for item in items:            qty = item[4]            value += qty        self.label_15.setText(str(value))        self.label_26.setText(str(value))    def load_items(self):        def call1():            cur.execute('SELECT * FROM debtors')            items = cur.fetchall()            return items        def call():            cur.execute('SELECT * FROM Item')            items = cur.fetchall()            return items        def call2():            cur.execute('SELECT * FROM sale')            items = cur.fetchall()            return items        def call3():            cur.execute('SELECT * FROM store_item')            items = cur.fetchall()            return items        self.list_items(call())        self.list_items(call(), 2)        self.items_value(call())        self.items_qty(call())        self.list_items(call1(),3)        self.list_items(call2(),4)        self.list_items(call3(),5)    def list_items(self, items, table=1):#to instatiate items to the tables        #items = list(itemss)        #conn.close()        count = len(items)        if table == 1:            tableWidget = self.tableWidget        elif table ==2:            tableWidget = self.tableWidget_2        elif table ==3:            tableWidget = self.tableWidget_3        elif table ==4:            tableWidget = self.tableWidget_5        elif table ==5:            tableWidget = self.tableWidget_11        tableWidget.setRowCount(0)        tableWidget.setRowCount(count)        tablerow = 0        for item in items:            item = list(item)            # print(item)            item[0] = str(item[0])            item[3] = str(item[3])            item[4] = str(item[4])            item[5] = str(item[5])            # item[6] = str(item[6])            # item[7] = str(item[7])            tableWidget.setItem(tablerow, 0, QtWidgets.QTableWidgetItem(item[0]))            tableWidget.setItem(tablerow, 1, QtWidgets.QTableWidgetItem(item[1]))            tableWidget.setItem(tablerow, 2, QtWidgets.QTableWidgetItem(item[2]))            tableWidget.setItem(tablerow, 3, QtWidgets.QTableWidgetItem(item[3]))            tableWidget.setItem(tablerow, 4, QtWidgets.QTableWidgetItem(item[4]))            if table == 3 or table == 4 or table == 5:                tableWidget.setItem(tablerow, 5, QtWidgets.QTableWidgetItem(item[5]))                tableWidget.setItem(tablerow, 6, QtWidgets.QTableWidgetItem(str(item[6])))                tableWidget.setItem(tablerow, 7, QtWidgets.QTableWidgetItem(item[7]))                if table==3:                    tableWidget.setItem(tablerow, 8, QtWidgets.QTableWidgetItem(item[8]))            tablerow +=1        conn.commit()    def filters(self, table):        #print('1',table==1)        #print('2',table==2)        #print('3',table==3)        def get_search():#filter for the first table            search_type = int(self.comboBox_4.currentIndex())            fill = self.home_filter_lineEdit.text()            # print(search_type)            if search_type == 0:                cur.execute(f"SELECT * FROM Item WHERE id LIKE '%{fill}%'",                            #{"name":fill}                            #(fill,)                            )            else:                cur.execute(f"SELECT * FROM Item WHERE name LIKE '%{fill}%'",                            #{"name":fill}                            #(fill,)                            )            items = cur.fetchall()            data = {}            datas = []            try:                # print(items[0])                def test():                    # print(data)                    for i in self.customer_items:#                        x = i['id']                        if x in prev:                            pass                        else:                            prev.append(x)                    #check if item is already in list to increase items_qty                    if datas[0]['id'] in prev:                        if int(datas[0]['qty'])==0:                            print('Item out Of STOCK')                        else:                            x=datas[0]['id']                            y = prev.index(x)                            #print('prev list',prev)                            #print('in table list',x)                            #print('item table index',y)                            self.item_plus(y)                            self.grand_total()                    #add item to list                    else:                        if int(datas[0]['qty'])==0:                            print('Item out Of STOCK')                        else:                            self.cust_items_list(datas)#instantiating customer_items_list to add an item                            self.customer_items.append(datas)                            self.grand_total()                if items[0][0] == fill:                    data['name'] = items[0][1]                    data['description'] = items[0][2]                    data['id'] = items[0][0]                    data['qty'] = items[0][4]                    data['price'] = items[0][3]                    data['quantity'] = 1                    datas.append(data)                    print('perfect')                    print(data)                    #self.customer_items.append(data)                    #self.cust_items_list(datas)                    test()                return items            except:                return items        def get_search_1():#filter for the second table            fill = self.lineEdit.text()            #print('clicked')            cur.execute(f"SELECT * FROM Item WHERE name LIKE '%{fill}%'",                        #{"name":fill}                        #(fill,)                        )            items = cur.fetchall()            return items        def get_search_2():#filter for the third table            fill = self.lineEdit_2.text()            #print('clicked')            cur.execute(f"SELECT * FROM debtors WHERE ref LIKE '%{fill}%'",                        #{"name":fill}                        #(fill,)                        )            items = cur.fetchall()            return items        if table==1:            #print(f'items fetched {get_search()}')            self.list_items(get_search())        elif table == 2:            #print(f'items fetched {get_search_1()}')            self.list_items(get_search_1(),2)        elif table == 3:            #print(f'items fetched {get_search_2()}')            self.list_items(get_search_2(),3)    def items_bought(self):        data = []        # print(customer_cart)        for i in customer_cart:            datas = f"{i['name']},x,{i['quantity']}, ,{i['ps']}"            data.append(datas)        return print('\n'.join(data))    #------------------------ Dialoges --------------------------\    def add_dialog(self):        #print('dialoge')        #add_page_ui()        dlg = add_page_ui()        dlg.exec_()    def add_dialog2(self):        #print('dialoge')        #add_page_ui()        dlg = add_page_ui2()        dlg.exec_()    def credit_accept(self):        #print('dialoge')        #add_page_ui()        index = (self.tableWidget_3.selectionModel().currentIndex())        #row = index.sibling(index.row(),index.column()).data()        #ls = []        list = []        if True:            for colum in range(8):#to bring out the table data for use                row = index.sibling(index.row(),colum).data()                list.append(row)            data = {                "ref" : list[0],                "name":list[1],                "contact": list[2],                "address": list[3],                "items":list[4],                "total": list[5],                "date": list[6],            }        def debt_paid():            conn = sqlite3.connect(database)            cur = conn.cursor()            cur.execute(f"INSERT INTO sale (ref,customer,contact,address,items,price,date,payment_type) VALUES ('{list[0]}','{data['name']}','{data['contact']}','{data['address']}','{self.items_bought()}','{data['total']}',datetime('now','localtime'),'ON_CREDIT')")            cur.execute(f"UPDATE debtors SET paid = 'Paid' WHERE ref = '{list[0]}'")            conn.commit()            conn.close()            #self.update_daily_sale()        dlg = credit_accept(list)        if dlg.exec_() == QDialog.Accepted:            print('Debt paid succesfully')            self.statusBar().showMessage('Debt paid succesfully')            try:                debt_paid()            except:                self.statusBar().showMessage('Debt was already paid')                print('error')            #dlg.exec_()    def remove_dialog(self):        cur.execute('SELECT * FROM Item')        items = cur.fetchall()        dlg = remove_page_ui()        dlg.exec_()    def remove_dialog2(self):        cur.execute('SELECT * FROM Item')        items = cur.fetchall()        dlg = remove_page_ui2()        dlg.exec_()    def edit_dialog(self):        items = cur.fetchall()        dlg = edit_page_ui()        dlg.exec_()    def edit_dialog2(self):        items = cur.fetchall()        dlg = edit_page_ui2()        dlg.exec_()    def print_dialog(self):        global payment_type        payment_type = int(self.comboBox.currentIndex())        items = cur.fetchall()        customer_name = self.lineEdit_cust_name.text()        customer_contact = self.lineEdit_cust_cont.text()        customer_address = self.lineEdit_cust_add.text()        #print(customer_name,customer_contact,customer_address)        self.items_bought        global cart_dic        cart_dic = {}        cart_dic['name'] = customer_name        cart_dic['contact'] = customer_contact        cart_dic['address'] = customer_address        cart_dic['items'] = customer_cart        total = 0        for items in customer_cart:            price = items['ps']            total+=int(price)        cart_dic['total'] = total        #print(cart_dic)        #print(customer_cart)        dlg = Cart_approved()        # dlg.exec_()        self.daily_sales()    def Cal_dialog(self):        dlg = cal_page_ui()        dlg.exec_()if __name__ == "__main__":    import sys    app = QtWidgets.QApplication(sys.argv)    Dialog = Ui_Dialog()    # Dialog = QDialog()    # ui = Ui_Dialog()    # ui.setupUi(Dialog)    # Dialog.show()    if Dialog.exec_() and Dialog.doLogin():        print('ready')        MainWindow = MainWindow()        #widget = QtWidgets()        #widget.addwidget(MainWindow)        MainWindow.show()        sys.exit(app.exec_())